¤4
iC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Managers\FenManager.cs
public 
class 

FenManager 
{ 
private 
const 
string 
	START_FEN "
=# $
$str% _
;_ `
private 
static 
readonly 

Dictionary &
<& '
char' +
,+ ,
int- 0
>0 1
pieceTypeFromSymbol2 E
=F G
newH K
(K L
)L M
;M N
public		 

static		 
void		 
Init		 
(		 
)		 
{		 
pieceTypeFromSymbol

 
.

 
Add

 
(

  
$char

  #
,

# $
Piece

% *
.

* +
KING

+ /
)

/ 0
;

0 1
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
PAWN+ /
)/ 0
;0 1
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
KNIGHT+ 1
)1 2
;2 3
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
BISHOP+ 1
)1 2
;2 3
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
ROOK+ /
)/ 0
;0 1
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
QUEEN+ 0
)0 1
;1 2
pieceTypeFromSymbol 
. 
Add 
(  
$char  #
,# $
Piece% *
.* +
KNOOK+ 0
)0 1
;1 2
LoadFromFen 
( 
	START_FEN 
) 
; 
} 
public 

static 
void 
LoadFromFen "
(" #
string# )
fen* -
)- .
{/ 0
for 
( 
int 
i 
= 
$num 
; 
i 
< 
$num 
; 
i  !
++! #
)# $
Board% *
.* +
Square+ 1
[1 2
i2 3
]3 4
=5 6
$num7 8
;8 9
string 
[ 
] 
sections 
= 
fen 
.  
Split  %
(% &
$str& )
)) *
;* +
int 
file 
= 
$num 
; 
int 
rank 
= 
$num 
; 
foreach 
( 
char 
symbol 
in 
sections  (
[( )
$num) *
]* +
)+ ,
{- .
if 
( 
symbol 
== 
$char 
) 
{  
file 
= 
$num 
; 
rank   
--   
;   
}!! 
else"" 
{"" 
if## 
(## 
char## 
.## 
IsDigit##  
(##  !
symbol##! '
)##' (
)##( )
{##* +
file$$ 
+=$$ 
($$ 
int$$  
)$$  !
char$$! %
.$$% &
GetNumericValue$$& 5
($$5 6
symbol$$6 <
)$$< =
;$$= >
}%% 
else&& 
{&& 
int'' 
pieceColour'' #
=''$ %
char''& *
.''* +
IsUpper''+ 2
(''2 3
symbol''3 9
)''9 :
?''; <
Piece''= B
.''B C
WHITE''C H
:''I J
Piece''K P
.''P Q
BLACK''Q V
;''V W
int(( 
	pieceType(( !
=((" #
pieceTypeFromSymbol(($ 7
[((7 8
char((8 <
.((< =
ToLower((= D
(((D E
symbol((E K
)((K L
]((L M
;((M N
Board)) 
.)) 
Square))  
[))  !
rank))! %
*))& '
$num))( )
+))* +
file)), 0
]))0 1
=))2 3
	pieceType))4 =
|))> ?
pieceColour))@ K
;))K L
file** 
++** 
;** 
}++ 
},, 
}-- 	
Board// 
.// 
colorToMove// 
=// 
sections// $
[//$ %
$num//% &
]//& '
==//( *
$str//+ .
?/// 0
Piece//1 6
.//6 7
WHITE//7 <
://= >
Piece//? D
.//D E
BLACK//E J
;//J K
Board00 
.00 
opponentColor00 
=00 
sections00 &
[00& '
$num00' (
]00( )
==00* ,
$str00- 0
?001 2
Piece003 8
.008 9
BLACK009 >
:00? @
Piece00A F
.00F G
WHITE00G L
;00L M
string22 
castlingRights22 
=22 
sections22  (
.22( )
Length22) /
>220 1
$num222 3
?224 5
sections226 >
[22> ?
$num22? @
]22@ A
:22B C
$str22D J
;22J K
Board33 
.33 
wKingsideCastle33 
=33 
castlingRights33  .
.33. /
Contains33/ 7
(337 8
$str338 ;
)33; <
;33< =
Board44 
.44 
wQueensideCastle44 
=44  
castlingRights44! /
.44/ 0
Contains440 8
(448 9
$str449 <
)44< =
;44= >
Board55 
.55 
bKingsideCastle55 
=55 
castlingRights55  .
.55. /
Contains55/ 7
(557 8
$str558 ;
)55; <
;55< =
Board66 
.66 
bQueensideCastle66 
=66  
castlingRights66! /
.66/ 0
Contains660 8
(668 9
$str669 <
)66< =
;66= >
}77 
}88 Ò
mC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Managers\GeneralManager.cs
public 
class 
GeneralManager 
: 
MonoBehaviour +
{, -
private 
void 
Awake 
( 
) 
{ 

FenManager 
. 
Init 
( 
) 
; 
} 
}		 üT
nC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Managers\MovementManager.cs
public 
class 
MovementManager 
: 
MonoBehaviour ,
{- .
[ 
Header 
( 
$str 
) 
] 
[		 
SerializeField		 
]		 
private		 
Camera		 #
cam		$ '
;		' (
private 
int 
screenWidth 
; 
private 
int 
screenHeight 
; 
private 
readonly 
List 
< 
float 
>  
cameraXCoordinates! 3
=4 5
new6 9
(9 :
): ;
;; <
private 
readonly 
List 
< 
float 
>  
cameraYCoordinates! 3
=4 5
new6 9
(9 :
): ;
;; <
[ 
HideInInspector 
] 
public 
bool !
pickedUp" *
;* +
private 
int 
pickedUpIndex 
; 
private 
void 
Start 
( 
) 
{ 
screenWidth 
= 
Screen 
. 
width "
;" #
screenHeight 
= 
Screen 
. 
height $
;$ %
float 

regionSize 
= 
screenWidth &
/' (
$num) .
;. /
for 
( 
int 
yIndex 
= 
$num 
; 
yIndex #
<=$ &
$num' (
;( )
yIndex* 0
++0 2
)2 3
{4 5
float 
y 
= 
yIndex 
* 

regionSize )
/* +
screenHeight, 8
-9 :
$num; A
;A B
cameraYCoordinates 
. 
Add "
(" #
y# $
)$ %
;% &
} 	
for   
(   
int   
xIndex   
=   
$num   
;   
xIndex   #
<=  $ &
$num  ' )
;  ) *
xIndex  + 1
++  1 3
)  3 4
{  5 6
float!! 
x!! 
=!! 
xIndex!! 
*!! 

regionSize!! )
/!!* +
screenWidth!!, 7
;!!7 8
cameraXCoordinates## 
.## 
Add## "
(##" #
x### $
)##$ %
;##% &
}$$ 	
}%% 
private'' 
void'' 
Update'' 
('' 
)'' 
{'' 
if(( 

((( 
screenWidth(( 
!=(( 
Screen(( !
.((! "
width((" '
||((( *
screenHeight((+ 7
!=((8 :
Screen((; A
.((A B
height((B H
)((H I
{((J K
screenWidth)) 
=)) 
Screen))  
.))  !
width))! &
;))& '
screenHeight** 
=** 
Screen** !
.**! "
height**" (
;**( )
}++ 	
Vector3-- 
mousePos-- 
=-- 
Input--  
.--  !
mousePosition--! .
;--. /
mousePos.. 
... 
z.. 
=.. 
$num.. 
;.. 
int00 
x00 
=00 
FindIndices00 
(00 
cameraXCoordinates00 .
.00. /
ToArray00/ 6
(006 7
)007 8
,008 9
mousePos00: B
.00B C
x00C D
/00E F
screenWidth00G R
)00R S
;00S T
int11 
y11 
=11 
FindIndices11 
(11 
cameraYCoordinates11 .
.11. /
ToArray11/ 6
(116 7
)117 8
,118 9
mousePos11: B
.11B C
y11C D
/11E F
screenHeight11G S
)11S T
;11T U
int33 
index33 
=33 
x33 
+33 
$num33 
*33 
y33 
;33 
if55 

(55 
x55 
==55 
-55 
$num55 
||55 
y55 
==55 
-55 
$num55 
)55 
index55  %
=55& '
-55( )
$num55) *
;55* +
if77 

(77 
Input77 
.77 
GetButtonDown77 
(77  
$str77  '
)77' (
)77( )
PickupObject77* 6
(776 7
index777 <
)77< =
;77= >
if88 

(88 
Input88 
.88 
GetButtonUp88 
(88 
$str88 %
)88% &
)88& '

DropObject88( 2
(882 3
index883 8
)888 9
;889 :
if:: 

(:: 
pickedUp:: 
):: 

MoveObject::  
(::  !
cam::! $
.::$ %
ScreenToWorldPoint::% 7
(::7 8
mousePos::8 @
)::@ A
)::A B
;::B C
};; 
private== 
int== 
FindIndices== 
(== 
float== !
[==! "
]==" #
sortedArray==$ /
,==/ 0
float==1 6
x==7 8
)==8 9
{==: ;
if>> 

(>> 
x>> 
<>> 
sortedArray>> 
[>> 
$num>> 
]>> 
||>> !
x>>" #
>>>$ %
sortedArray>>& 1
[>>1 2
^>>2 3
$num>>3 4
]>>4 5
)>>5 6
return>>7 =
->>> ?
$num>>? @
;>>@ A
int@@ 
left@@ 
=@@ 
-@@ 
$num@@ 
;@@ 
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB 
iBB 
<BB 
sortedArrayBB '
.BB' (
LengthBB( .
;BB. /
iBB0 1
++BB1 3
)BB3 4
{BB5 6
ifCC 
(CC 
!CC 
(CC 
sortedArrayCC 
[CC 
iCC 
]CC  
>CC! "
xCC# $
)CC$ %
)CC% &
continueCC' /
;CC/ 0
leftEE 
=EE 
iEE 
-EE 
$numEE 
;EE 
breakFF 
;FF 
}GG 	
returnII 
leftII 
;II 
}JJ 
privateLL 
voidLL 
PickupObjectLL 
(LL 
intLL !
indexLL" '
)LL' (
{LL) *
pickedUpMM 
=MM 
trueMM 
;MM 
pickedUpIndexOO 
=OO 
indexOO 
;OO 
}PP 
privateRR 
voidRR 

DropObjectRR 
(RR 
intRR 
indexRR  %
)RR% &
{RR' (
pickedUpSS 
=SS 
falseSS 
;SS 
ifUU 

(UU 
pickedUpIndexUU 
==UU 
indexUU "
||UU# %
indexUU& +
==UU, .
-UU/ 0
$numUU0 1
)UU1 2
returnUU3 9
;UU9 :
ifWW 

(WW 
BoardWW 
.WW 
SquareWW 
[WW 
indexWW 
]WW 
!=WW  "
$numWW# $
)WW$ %
DestroyWW& -
(WW- .
BoardWW. 3
.WW3 4
PiecesWW4 :
[WW: ;
indexWW; @
]WW@ A
)WWA B
;WWB C
BoardYY 
.YY 
PiecesYY 
[YY 
indexYY 
]YY 
=YY 
BoardYY #
.YY# $
PiecesYY$ *
[YY* +
pickedUpIndexYY+ 8
]YY8 9
;YY9 :
BoardZZ 
.ZZ 
PiecesZZ 
[ZZ 
indexZZ 
]ZZ 
.ZZ 
	transformZZ %
.ZZ% &
positionZZ& .
=ZZ/ 0
newZZ1 4
Vector3ZZ5 <
(ZZ< =
BoardZZ= B
.ZZB C
PiecesZZC I
[ZZI J
indexZZJ O
]ZZO P
.ZZP Q
	transformZZQ Z
.ZZZ [
positionZZ[ c
.ZZc d
xZZd e
,ZZe f
BoardZZg l
.ZZl m
PiecesZZm s
[ZZs t
indexZZt y
]ZZy z
.ZZz {
	transform	ZZ{ 
.
ZZ 
position
ZZ 
.
ZZ 
y
ZZ 
,
ZZ 
$num
ZZ 
)
ZZ 
;
ZZ 
Board[[ 
.[[ 
Pieces[[ 
[[[ 
index[[ 
][[ 
.[[ 
GetComponent[[ (
<[[( )
SpriteRenderer[[) 7
>[[7 8
([[8 9
)[[9 :
.[[: ;
sortingOrder[[; G
=[[H I
$num[[J K
;[[K L
Board\\ 
.\\ 
Pieces\\ 
[\\ 
pickedUpIndex\\ "
]\\" #
=\\$ %
null\\& *
;\\* +
Board^^ 
.^^ 
Square^^ 
[^^ 
index^^ 
]^^ 
=^^ 
Board^^ #
.^^# $
Square^^$ *
[^^* +
pickedUpIndex^^+ 8
]^^8 9
;^^9 :
Board__ 
.__ 
Square__ 
[__ 
pickedUpIndex__ "
]__" #
=__$ %
$num__& '
;__' (
pickedUpIndexaa 
=aa 
-aa 
$numaa 
;aa 
}bb 
privatedd 
voiddd 

MoveObjectdd 
(dd 
Vector3dd #
mousePosdd$ ,
)dd, -
{dd. /
mousePosee 
.ee 
zee 
=ee 
$numee 
;ee 
Boardff 
.ff 
Piecesff 
[ff 
pickedUpIndexff "
]ff" #
.ff# $
	transformff$ -
.ff- .
positionff. 6
=ff7 8
mousePosff9 A
;ffA B
Boardgg 
.gg 
Piecesgg 
[gg 
pickedUpIndexgg "
]gg" #
.gg# $
GetComponentgg$ 0
<gg0 1
SpriteRenderergg1 ?
>gg? @
(gg@ A
)ggA B
.ggB C
sortingOrderggC O
=ggP Q
$numggR U
;ggU V
}hh 
}jj 
mC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Neural Network\PointGenerator.cs
public 
class 
PointGenerator 
: 
MonoBehaviour +
{ 
[ 
SerializeField 
] 
private 

GameObject '
SamplePointPrefab( 9
;9 :
private

 
readonly

 
List

 
<

 
float

 
>

  
xCoords

! (
=

) *
new

+ .
(

. /
)

/ 0
;

0 1
private 
readonly 
List 
< 
float 
>  
yCoords! (
=) *
new+ .
(. /
)/ 0
;0 1
private 
void 
Start 
( 
) 
{ 
for 
( 
int 
i 
= 
$num 
; 
i 
<= 
$num  
;  !
i" #
++# %
)% &
{& '
xCoords 
. 
Add 
( 
Random 
. 
Range $
($ %
-% &
$num& (
,( )
$num* ,
), -
/. /
$num0 3
)3 4
;4 5
yCoords 
. 
Add 
( 
Random 
. 
Range $
($ %
-% &
$num& +
,+ ,
$num- 2
)2 3
/4 5
$num6 9
)9 :
;: ;
} 	

DrawPoints 
( 
) 
; 
} 
private 
void 

DrawPoints 
( 
) 
{ 
for 
( 
int 
i 
= 
$num 
; 
i 
<= 
$num  
;  !
i" #
++# %
)% &
{' (

GameObject 
point 
= 
Instantiate *
(* +
SamplePointPrefab+ <
,< =
	transform> G
)G H
;H I
Vector3 
transformPosition %
=& '
new( +
Vector3, 3
{4 5
x 
= 
xCoords 
[ 
i 
] 
, 
y 
= 
yCoords 
[ 
i 
] 
} 
; 
point 
. 
	transform 
. 
position $
=% &
transformPosition' 8
;8 9
if!! 
(!! 
xCoords!! 
[!! 
i!! 
]!! 
<!! 
-!! 
$num!! 
&&!!  "
yCoords!!# *
[!!* +
i!!+ ,
]!!, -
<!!. /
$num!!0 1
)!!1 2
point!!3 8
.!!8 9
GetComponent!!9 E
<!!E F
SpriteRenderer!!F T
>!!T U
(!!U V
)!!V W
.!!W X
color!!X ]
=!!^ _
Color!!` e
.!!e f
blue!!f j
;!!j k
else"" 
point"" 
."" 
GetComponent"" #
<""# $
SpriteRenderer""$ 2
>""2 3
(""3 4
)""4 5
.""5 6
color""6 ;
=""< =
Color""> C
.""C D
red""D G
;""G H
}## 	
}$$ 
}%%  
lC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Renderers\RenderPieces.cs
public 
class 
RenderPieces 
: 
MonoBehaviour )
{* +
[ 
Header 
( 
$str 
) 
] 
[		 
SerializeField		 
]		 
private		 
Camera		 #
cam		$ '
;		' (
[

 
SerializeField

 
]

 
private

 
MovementManager

 ,
movementManager

- <
;

< =
[ 
Header 
( 
$str 
) 
] 
[ 
SerializeField 
] 
private 
Sprite #

WHITE_PAWN$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #
WHITE_KNIGHT$ 0
;0 1
[ 
SerializeField 
] 
private 
Sprite #
WHITE_BISHOP$ 0
;0 1
[ 
SerializeField 
] 
private 
Sprite #

WHITE_ROOK$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #

WHITE_KING$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #
WHITE_QUEEN$ /
;/ 0
[ 
SerializeField 
] 
private 
Sprite #
WHITE_KNOOK$ /
;/ 0
[ 
Header 
( 
$str 
) 
] 
[ 
SerializeField 
] 
private 
Sprite #

BLACK_PAWN$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #
BLACK_KNIGHT$ 0
;0 1
[ 
SerializeField 
] 
private 
Sprite #
BLACK_BISHOP$ 0
;0 1
[ 
SerializeField 
] 
private 
Sprite #

BLACK_ROOK$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #

BLACK_KING$ .
;. /
[ 
SerializeField 
] 
private 
Sprite #
BLACK_QUEEN$ /
;/ 0
[ 
SerializeField 
] 
private 
Sprite #
BLACK_KNOOK$ /
;/ 0
private 
int 
screenWidth 
; 
private 
int 
screenHeight 
; 
private!! 
readonly!! 
List!! 
<!! 
float!! 
>!!  
cameraXCoordinates!!! 3
=!!4 5
new!!6 9
(!!9 :
)!!: ;
;!!; <
private"" 
readonly"" 
List"" 
<"" 
float"" 
>""  
cameraYCoordinates""! 3
=""4 5
new""6 9
(""9 :
)"": ;
;""; <
private$$ 
readonly$$ 
List$$ 
<$$ 
float$$ 
>$$  
boardXCoordinates$$! 2
=$$3 4
new$$5 8
($$8 9
)$$9 :
;$$: ;
private%% 
readonly%% 
List%% 
<%% 
float%% 
>%%  
boardYCoordinates%%! 2
=%%3 4
new%%5 8
(%%8 9
)%%9 :
;%%: ;
private'' 
float'' 
xSize'' 
;'' 
private(( 
float(( 
ySize(( 
;(( 
private** 
void** 
Start** 
(** 
)** 
{** 
screenWidth++ 
=++ 
Screen++ 
.++ 
width++ "
;++" #
screenHeight,, 
=,, 
Screen,, 
.,, 
height,, $
;,,$ %
float.. 

regionSize.. 
=.. 
screenWidth.. &
/..' (
$num..) .
;... /
for00 
(00 
int00 
yIndex00 
=00 
$num00 
;00 
yIndex00 #
<=00$ &
$num00' (
;00( )
yIndex00* 0
++000 2
)002 3
{004 5
float11 
y11 
=11 
yIndex11 
*11 

regionSize11 )
/11* +
screenHeight11, 8
-119 :
$num11; A
;11A B
cameraYCoordinates33 
.33 
Add33 "
(33" #
y33# $
)33$ %
;33% &
}44 	
for66 
(66 
int66 
xIndex66 
=66 
$num66 
;66 
xIndex66 #
<=66$ &
$num66' )
;66) *
xIndex66+ 1
++661 3
)663 4
{665 6
float77 
x77 
=77 
xIndex77 
*77 

regionSize77 )
/77* +
screenWidth77, 7
;777 8
cameraXCoordinates99 
.99 
Add99 "
(99" #
x99# $
)99$ %
;99% &
}:: 	-
!ConvertCoordinatesToWorldPosition<< )
(<<) *
)<<* +
;<<+ ,
for>> 
(>> 
int>> 
i>> 
=>> 
$num>> 
;>> 
i>> 
<>> 
Board>> !
.>>! "
Square>>" (
.>>( )
Length>>) /
;>>/ 0
i>>1 2
++>>2 4
)>>4 5
{>>6 7
int?? 
piece?? 
=?? 
Board?? 
.?? 
Square?? $
[??$ %
i??% &
]??& '
;??' (
ifAA 
(AA 
PieceAA 
.AA 
IsColorAA 
(AA 
pieceAA #
,AA# $
PieceAA% *
.AA* +
WHITEAA+ 0
)AA0 1
)AA1 2
{AA3 4
switchBB 
(BB 
PieceBB 
.BB 
	PieceNameBB '
(BB' (
pieceBB( -
)BB- .
)BB. /
{BB0 1
caseCC 
$strCC 
:CC  
CreatePieceDD #
(DD# $

WHITE_PAWNDD$ .
,DD. /
iDD0 1
)DD1 2
;DD2 3
breakEE 
;EE 
caseFF 
$strFF !
:FF! "
CreatePieceGG #
(GG# $
WHITE_KNIGHTGG$ 0
,GG0 1
iGG2 3
)GG3 4
;GG4 5
breakHH 
;HH 
caseII 
$strII !
:II! "
CreatePieceJJ #
(JJ# $
WHITE_BISHOPJJ$ 0
,JJ0 1
iJJ2 3
)JJ3 4
;JJ4 5
breakKK 
;KK 
caseLL 
$strLL 
:LL  
CreatePieceMM #
(MM# $

WHITE_ROOKMM$ .
,MM. /
iMM0 1
)MM1 2
;MM2 3
breakNN 
;NN 
caseOO 
$strOO 
:OO  
CreatePiecePP #
(PP# $

WHITE_KINGPP$ .
,PP. /
iPP0 1
)PP1 2
;PP2 3
breakQQ 
;QQ 
caseRR 
$strRR  
:RR  !
CreatePieceSS #
(SS# $
WHITE_QUEENSS$ /
,SS/ 0
iSS1 2
)SS2 3
;SS3 4
breakTT 
;TT 
caseUU 
$strUU  
:UU  !
CreatePieceVV #
(VV# $
WHITE_KNOOKVV$ /
,VV/ 0
iVV1 2
)VV2 3
;VV3 4
breakWW 
;WW 
}XX 
}YY 
elseZZ 
{ZZ 
switch[[ 
([[ 
Piece[[ 
.[[ 
	PieceName[[ '
([[' (
piece[[( -
)[[- .
)[[. /
{[[0 1
case\\ 
$str\\ 
:\\  
CreatePiece]] #
(]]# $

BLACK_PAWN]]$ .
,]]. /
i]]0 1
)]]1 2
;]]2 3
break^^ 
;^^ 
case__ 
$str__ !
:__! "
CreatePiece`` #
(``# $
BLACK_KNIGHT``$ 0
,``0 1
i``2 3
)``3 4
;``4 5
breakaa 
;aa 
casebb 
$strbb !
:bb! "
CreatePiececc #
(cc# $
BLACK_BISHOPcc$ 0
,cc0 1
icc2 3
)cc3 4
;cc4 5
breakdd 
;dd 
caseee 
$stree 
:ee  
CreatePieceff #
(ff# $

BLACK_ROOKff$ .
,ff. /
iff0 1
)ff1 2
;ff2 3
breakgg 
;gg 
casehh 
$strhh 
:hh  
CreatePieceii #
(ii# $

BLACK_KINGii$ .
,ii. /
iii0 1
)ii1 2
;ii2 3
breakjj 
;jj 
casekk 
$strkk  
:kk  !
CreatePiecell #
(ll# $
BLACK_QUEENll$ /
,ll/ 0
ill1 2
)ll2 3
;ll3 4
breakmm 
;mm 
casenn 
$strnn  
:nn  !
CreatePieceoo #
(oo# $
BLACK_KNOOKoo$ /
,oo/ 0
ioo1 2
)oo2 3
;oo3 4
breakpp 
;pp 
}qq 
}rr 
}ss 	
}tt 
privatevv 
voidvv 
Updatevv 
(vv 
)vv 
{vv 
forww 
(ww 
intww 
iww 
=ww 
$numww 
;ww 
iww 
<ww 
Boardww !
.ww! "
Piecesww" (
.ww( )
Lengthww) /
;ww/ 0
iww1 2
++ww2 4
)ww4 5
{ww6 7
ifxx 
(xx 
Boardxx 
.xx 
Piecesxx 
[xx 
ixx 
]xx 
==xx  "
nullxx# '
||xx( *
movementManagerxx+ :
.xx: ;
pickedUpxx; C
)xxC D
continuexxE M
;xxM N
Boardzz 
.zz 
Pieceszz 
[zz 
izz 
]zz 
.zz 
	transformzz %
.zz% &
positionzz& .
=zz/ 0
newzz1 4
Vector3zz5 <
(zz< =
boardXCoordinateszz= N
[zzN O
PiecezzO T
.zzT U
	FileIndexzzU ^
(zz^ _
izz_ `
)zz` a
]zza b
+zzc d
xSizezze j
/zzk l
$numzzm n
+zzo p
$numzzq v
,zzv w
boardYCoordinates{{ !
[{{! "
Piece{{" '
.{{' (
	RankIndex{{( 1
({{1 2
i{{2 3
){{3 4
]{{4 5
+{{6 7
ySize{{8 =
/{{> ?
$num{{@ A
,{{A B
$num{{C D
){{D E
;{{E F
}|| 	
}}} 
private 
void -
!ConvertCoordinatesToWorldPosition 2
(2 3
)3 4
{5 6
foreach
 
(
 
var
 
worldPos
 
in
   
cameraXCoordinates
! 3
.
3 4
Select
4 :
(
: ;
normalizedX
; F
=>
G I
cam
 
.
 "
ViewportToWorldPoint
 -
(
- .
new
. 1
Vector3
2 9
(
9 :
normalizedX
: E
,
E F
$num
G H
,
H I
$num
J K
)
K L
)
L M
)
M N
)
N O
{
P Q
boardXCoordinates
 
.
 
Add
 !
(
! "
worldPos
" *
.
* +
x
+ ,
)
, -
;
- .
}
 	
foreach
 
(
 
var
 
worldPos
 
in
   
cameraYCoordinates
! 3
.
3 4
Select
4 :
(
: ;
normalizedY
; F
=>
G I
cam
 
.
 "
ViewportToWorldPoint
 -
(
- .
new
. 1
Vector3
2 9
(
9 :
$num
: ;
,
; <
normalizedY
= H
,
H I
$num
J K
)
K L
)
L M
)
M N
)
N O
{
P Q
boardYCoordinates
 
.
 
Add
 !
(
! "
worldPos
" *
.
* +
y
+ ,
)
, -
;
- .
}
 	
xSize
 
=
 
Vector3
 
.
 
Distance
  
(
  !
new
! $
Vector3
% ,
(
, -
boardXCoordinates
- >
[
> ?
$num
? @
]
@ A
,
A B
$num
C D
,
D E
$num
F G
)
G H
,
H I
new
J M
Vector3
N U
(
U V
boardXCoordinates
V g
[
g h
$num
h i
]
i j
,
j k
$num
l m
,
m n
$num
o p
)
p q
)
q r
;
r s
ySize
 
=
 
Vector3
 
.
 
Distance
  
(
  !
new
! $
Vector3
% ,
(
, -
$num
- .
,
. /
boardYCoordinates
0 A
[
A B
$num
B C
]
C D
,
D E
$num
F G
)
G H
,
H I
new
J M
Vector3
N U
(
U V
$num
V W
,
W X
boardYCoordinates
Y j
[
j k
$num
k l
]
l m
,
m n
$num
o p
)
p q
)
q r
;
r s
}
 
private
 
void
 
CreatePiece
 
(
 
Sprite
 #
piece
$ )
,
) *
int
+ .
index
/ 4
)
4 5
{
6 7

GameObject
 
PieceObject
 
=
  
new
! $

GameObject
% /
{
0 1
	transform
 
=
 
{
 
position
 
=
 
new
 
Vector3
 &
(
& '
boardXCoordinates
' 8
[
8 9
Piece
9 >
.
> ?
	FileIndex
? H
(
H I
index
I N
)
N O
]
O P
+
Q R
xSize
S X
/
Y Z
$num
[ \
,
\ ]
boardYCoordinates
^ o
[
o p
Piece
p u
.
u v
	RankIndex
v 
( 
index 
) 
] 
+ 
ySize
] b
/
c d
$num
e f
,
f g
$num
h i
)
i j
,
j k
parent
 
=
 
	transform
 "
,
" #
name
 
=
 
index
 
.
 
ToString
 %
(
% &
)
& '
}
 
}
 	
;
	 

PieceObject
 
.
 
AddComponent
  
<
  !
SpriteRenderer
! /
>
/ 0
(
0 1
)
1 2
.
2 3
sprite
3 9
=
: ;
piece
< A
;
A B
PieceObject
 
.
 
GetComponent
  
<
  !
SpriteRenderer
! /
>
/ 0
(
0 1
)
1 2
.
2 3
drawMode
3 ;
=
< =
SpriteDrawMode
> L
.
L M
Sliced
M S
;
S T
PieceObject
 
.
 
GetComponent
  
<
  !
SpriteRenderer
! /
>
/ 0
(
0 1
)
1 2
.
2 3
size
3 7
=
8 9
new
: =
Vector2
> E
(
E F
xSize
F K
,
K L
ySize
M R
)
R S
;
S T
Board
 
.
 
Pieces
 
[
 
index
 
]
 
=
 
PieceObject
 )
;
) *
}
 
} â
eC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Convenience\Converter.cs
public 
class 
	Converter 
{ 
public 

static 
Sprite 
ConvertToSprite (
(( )
	Texture2D) 2
texture3 :
): ;
{ 
return 
Sprite 
. 
Create 
( 
texture $
,$ %
new& )
Rect* .
(. /
$num/ 0
,0 1
$num2 3
,3 4
texture5 <
.< =
width= B
,B C
textureD K
.K L
heightL R
)R S
,S T
Vector2U \
.\ ]
zero] a
)a b
;b c
} 
} þ
iC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Neural Network\Visualizer.cs
public 
class 

Visualizer 
: $
ImmediateModeShapeDrawer 2
{4 5
[		 
SerializeField		 
]		 
private		 
NetworkManager		 +
networkManager		, :
;		: ;
private 
int 
screenWidth 
; 
private 
int 
screenHeight 
; 
private 
void 
Start 
( 
) 
{ 
screenWidth 
= 
Screen 
. 
width "
;" #
screenHeight 
= 
Screen 
. 
height $
;$ %
} 
void 
OnPreRenderCallback	 
( 
Camera #
cam$ '
)' (
{ 
Debug 
. 
Log 
( 
$str 4
+5 6
cam7 :
.: ;
name; ?
)? @
;@ A
if 

( 
cam 
!= 
Camera 
. 
main 
) 
return  &
;& '
using 
( 
Draw 
. 
Command 
( 
cam 
)  
)  !
{" #
Draw   
.   
ThicknessSpace   
=    !
ThicknessSpace  " 0
.  0 1
Pixels  1 7
;  7 8
Draw!! 
.!! 
	Thickness!! 
=!! 
$num!! 
;!! 
for## 
(## 
int## 
x## 
=## 
$num## 
;## 
x## 
<## 
screenWidth##  +
;##+ ,
x##- .
++##. 0
)##0 1
{$$ 
for%% 
(%% 
int%% 
y%% 
=%% 
$num%% 
;%% 
y%%  !
<%%" #
screenHeight%%$ 0
;%%0 1
y%%2 3
++%%3 5
)%%5 6
{&& 
double'' 
output'' !
=''" #
networkManager''$ 2
.''2 3
network''3 :
.'': ;
Classify''; C
(''C D
x''D E
,''E F
y''G H
)''H I
;''I J
Color)) 
color)) 
=))  !
output))" (
<))) *
$num))+ /
?))0 1
new))2 5
Color))6 ;
()); <
$num))< ?
,))? @
$num))A B
,))B C
$num))D E
,))E F
$num))G J
)))J K
:))L M
new))N Q
Color))R W
())W X
$num))X Y
,))Y Z
$num))[ \
,))\ ]
$num))^ a
,))a b
$num))c f
)))f g
;))g h
Vector3++ 
pos++ 
=++  !
cam++" %
.++% & 
ViewportToWorldPoint++& :
(++: ;
new++; >
Vector3++? F
(++F G
x++G H
,++H I
y++J K
,++K L
$num++M N
)++N O
)++O P
;++P Q
Draw-- 
.-- 
	Rectangle-- "
(--" #
pos--# &
,--& '

Quaternion--( 2
.--2 3
identity--3 ;
,--; <
$num--= >
,--> ?
$num--@ A
,--A B
color--C H
)--H I
;--I J
}.. 
}// 
}00 	
}11 
}22 å
`C:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Core\Board.cs
public 
class 
Board 
{ 
public 

static 
readonly 
int 
[ 
]  
Square! '
=( )
new* -
int. 1
[1 2
$num2 4
]4 5
;5 6
public 

static 
readonly 

GameObject %
[% &
]& '
Pieces( .
=/ 0
new1 4

GameObject5 ?
[? @
$num@ B
]B C
;C D
public		 

static		 
List		 
<		 
int		 
[		 
]		 
>		 
prevSquares		 )
=		* +
new		, /
(		/ 0
)		0 1
;		1 2
public

 

static

 
List

 
<

 
int

 
[

 
]

 
>

 

prevPieces

 (
=

) *
new

+ .
(

. /
)

/ 0
;

0 1
public 

static 
bool 
[ 
] 
enPassantSquare (
=) *
new+ .
bool/ 3
[3 4
$num4 6
]6 7
;7 8
public 

static 
List 
< 
bool 
[ 
] 
>  
prevEnPassantSquares 3
=4 5
new6 9
(9 :
): ;
;; <
public 

static 
List 
< 
int 
> 
prevColorToMove +
=, -
new. 1
(1 2
)2 3
;3 4
public 

static 
List 
< 
bool 
> 
prevWKCastling +
=, -
new. 1
(1 2
)2 3
;3 4
public 

static 
List 
< 
bool 
> 
prevWQCastling +
=, -
new. 1
(1 2
)2 3
;3 4
public 

static 
List 
< 
bool 
> 
prevBKCastling +
=, -
new. 1
(1 2
)2 3
;3 4
public 

static 
List 
< 
bool 
> 
prevBQCastling +
=, -
new. 1
(1 2
)2 3
;3 4
public 

static 
int 
colorToMove !
=" #
Piece$ )
.) *
WHITE* /
;/ 0
public 

static 
int 
opponentColor #
=$ %
Piece& +
.+ ,
BLACK, 1
;1 2
public 

static 
bool 
wKingsideCastle &
=' (
true) -
;- .
public 

static 
bool 
wQueensideCastle '
=( )
true* .
;. /
public 

static 
bool 
bKingsideCastle &
=' (
true) -
;- .
public 

static 
bool 
bQueensideCastle '
=( )
true* .
;. /
} 
lC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Neural Network\NeuralNetwork.cs
public 
class 
NeuralNetwork 
{ 
private 
readonly 
Layer 
[ 
] 
layers #
;# $
public		 

NeuralNetwork		 
(		 
params		 
int		  #
[		# $
]		$ %

layerSizes		& 0
)		0 1
{		1 2
layers

 
=

 
new

 
Layer

 
[

 

layerSizes

 %
.

% &
Length

& ,
-

- .
$num

/ 0
]

0 1
;

1 2
for 
( 
int 
i 
= 
$num 
; 
i 
< 
layers "
." #
Length# )
;) *
i+ ,
++, .
). /
{0 1
layers 
[ 
i 
] 
= 
new 
Layer !
(! "

layerSizes" ,
[, -
i- .
]. /
,/ 0

layerSizes1 ;
[; <
i< =
+> ?
$num@ A
]A B
)B C
;C D
} 	
} 
private 
double 
[ 
] 
CalculateOutputs %
(& '
double' -
[- .
]. /
inputs0 6
)6 7
{8 9
return 
layers 
. 
	Aggregate 
(  
inputs  &
,& '
(( )
current) 0
,0 1
layer2 7
)7 8
=>9 ;
layer< A
.A B
CalculateOutputsB R
(R S
currentS Z
)Z [
)[ \
;\ ]
} 
public 

int 
Classify 
( 
params 
double  &
[& '
]' (
inputs) /
)/ 0
{0 1
double 
[ 
] 
outputs 
= 
CalculateOutputs +
(+ ,
inputs, 2
)2 3
;3 4
return 
IndexOfMaxValue 
( 
outputs &
)& '
;' (
} 
private 
int 
IndexOfMaxValue 
(  
double  &
[& '
]' (
array) .
). /
{0 1
int 
maxIndex 
= 
$num 
; 
double 
maxValue 
= 
array 
[  
$num  !
]! "
;" #
for 
( 
int 
i 
= 
$num 
; 
i 
< 
array !
.! "
Length" (
;( )
i* +
+++ -
)- .
{/ 0
if 
( 
! 
( 
array 
[ 
i 
] 
> 
maxValue %
)% &
)& '
continue( 0
;0 1
maxValue   
=   
array   
[   
i   
]   
;    
maxIndex!! 
=!! 
i!! 
;!! 
}"" 	
return$$ 
maxIndex$$ 
;$$ 
}%% 
public'' 

Layer'' 
['' 
]'' 
	GetLayers'' 
('' 
)'' 
{''  
return(( 
layers(( 
;(( 
})) 
}++ 
mC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Neural Network\NetworkManager.cs
public 
class 
NetworkManager 
: 
MonoBehaviour +
{, -
public 
"
IntIntDoubleDictionary !

weightDict" ,
;, -
public 
"
IntIntDoubleDictionary !
biasDict" *
;* +
	protected

 
internal

 
NeuralNetwork

 $
network

% ,
;

, -
private 
Layer 
[ 
] 
layers 
; 
private 
void 
Awake 
( 
) 
{ 
network 
= 
new 
NeuralNetwork #
(# $
$num$ %
,% &
$num' (
,( )
$num* +
)+ ,
;, -
layers 
= 
network 
. 
	GetLayers "
(" #
)# $
;$ %
for 
( 
int 
i 
= 
$num 
; 
i 
< 
layers "
." #
Length# )
;) *
i+ ,
++, .
). /
{0 1
double 
[ 
] 
weights 
= 
layers %
[% &
i& '
]' (
.( )

GetWeights) 3
(3 4
)4 5
;5 6

weightDict 
. 
Add 
( 
i 
, 
new !
IntDoubleDictionary" 5
(5 6
)6 7
)7 8
;8 9
for 
( 
int 
j 
= 
$num 
; 
j 
< 
weights  '
.' (
Length( .
;. /
j0 1
++1 3
)3 4
{5 6

weightDict 
[ 
i 
] 
. 
Add !
(! "
j" #
,# $
weights% ,
[, -
j- .
]. /
)/ 0
;0 1
} 
double 
[ 
] 
biases 
= 
layers $
[$ %
i% &
]& '
.' (
	GetBiases( 1
(1 2
)2 3
;3 4
biasDict 
. 
Add 
( 
i 
, 
new 
IntDoubleDictionary  3
(3 4
)4 5
)5 6
;6 7
for 
( 
int 
j 
= 
$num 
; 
j 
< 
biases  &
.& '
Length' -
;- .
j/ 0
++0 2
)2 3
{4 5
biasDict 
[ 
i 
] 
. 
Add 
(  
j  !
,! "
biases# )
[) *
j* +
]+ ,
), -
;- .
} 
} 	
} 
}   "
dC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Neural Network\Layer.cs
public 
class 
Layer 
{ 
private 
readonly 
int 

numNodesIn #
,# $
numNodesOut% 0
;0 1
private 
readonly 
double 
[ 
, 
] 
weights &
;& '
private 
readonly 
double 
[ 
] 
biases $
;$ %
public

 

Layer

 
(

 
int

 
nodesIn

 
,

 
int

 !
nodesOut

" *
)

* +
{

+ ,

numNodesIn 
= 
nodesIn 
; 
numNodesOut 
= 
nodesOut 
; 
weights 
= 
new 
double 
[ 

numNodesIn '
,' (
numNodesOut) 4
]4 5
;5 6
biases 
= 
new 
double 
[ 
numNodesOut '
]' (
;( )
} 
public 

double 
[ 
] 
CalculateOutputs $
($ %
double% +
[+ ,
], -
inputs. 4
)4 5
{5 6
double 
[ 
] 
weightedInputs 
=  !
new" %
double& ,
[, -
numNodesOut- 8
]8 9
;9 :
for 
( 
int 
nodeOut 
= 
$num 
; 
nodeOut %
<& '
numNodesOut( 3
;3 4
nodeOut5 <
++< >
)> ?
{? @
double 
weightedInput  
=! "
biases# )
[) *
nodeOut* 1
]1 2
;2 3
for 
( 
int 
nodeIn 
= 
$num 
;  
nodeIn! '
<( )

numNodesIn* 4
;4 5
nodeIn6 <
++< >
)> ?
{? @
weightedInput 
+=  
inputs! '
[' (
nodeIn( .
]. /
*0 1
weights2 9
[9 :
nodeIn: @
,@ A
nodeOutB I
]I J
;J K
} 
weightedInputs 
[ 
nodeOut "
]" #
=$ %
weightedInput& 3
;3 4
} 	
return 
weightedInputs 
; 
}   
public"" 

double"" 
["" 
]"" 

GetWeights"" 
("" 
)""  
{""! "
double## 
[## 
]## 
flattenedArray## 
=##  !
new##" %
double##& ,
[##, -

numNodesIn##- 7
*##8 9
numNodesOut##: E
]##E F
;##F G
int$$ 
index$$ 
=$$ 
$num$$ 
;$$ 
for&& 
(&& 
int&& 
i&& 
=&& 
$num&& 
;&& 
i&& 
<&& 

numNodesIn&& &
;&&& '
i&&( )
++&&) +
)&&+ ,
{'' 	
for(( 
((( 
int(( 
j(( 
=(( 
$num(( 
;(( 
j(( 
<(( 
numNodesOut((  +
;((+ ,
j((- .
++((. 0
)((0 1
{)) 
flattenedArray** 
[** 
index** $
]**$ %
=**& '
weights**( /
[**/ 0
i**0 1
,**1 2
j**3 4
]**4 5
;**5 6
index++ 
++++ 
;++ 
},, 
}-- 	
return// 
flattenedArray// 
;// 
}00 
public22 

double22 
[22 
]22 
	GetBiases22 
(22 
)22 
{22  !
return33 
biases33 
;33 
}44 
}66 ²
C:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\SerializableDictionary\Example\SerializableDictionaryExample.cs
public 
class )
SerializableDictionaryExample *
:+ ,
MonoBehaviour- :
{; <
[ 
SerializeField 
] "
StringStringDictionary $
m_stringStringDictionary 0
;0 1
public		 
IDictionary		 
<		 
string		 
,		 
string		 "
>		" #"
StringStringDictionary		$ :
{

 
get 
{ 
return $
m_stringStringDictionary '
;' (
}) *
set 
{ $
m_stringStringDictionary  
.  !
CopyFrom! )
(* +
value+ 0
)0 1
;1 2
}3 4
} 
public !
ObjectColorDictionary #
m_objectColorDictionary 5
;5 6
public &
StringColorArrayDictionary "(
m_objectColorArrayDictionary# ?
;? @
void 
Reset 
( 
) 
{ "
StringStringDictionary 
= 
new 

Dictionary )
<) *
string* 0
,0 1
string2 8
>8 9
(9 :
): ;
{< =
{> ?
$str? J
,J K
$strL U
}U V
,V W
{X Y
$strY e
,e f
$strg p
}p q
,q r
{s t
$strt 
,	 
$str
 
}
 
}
 
;
 #
m_objectColorDictionary 
= 
new !
ObjectColorDictionary  5
(5 6
)6 7
{8 9
{: ;

gameObject; E
,E F
ColorG L
.L M
blueM Q
}Q R
,R S
{T U
thisU Y
,Y Z
Color[ `
.` a
reda d
}d e
}f g
;g h
} 
} þ
C:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\SerializableDictionary\Example\UserSerializableDictionaries.cs
[ 
Serializable 
] 
public 
class "
StringStringDictionary #
:$ %"
SerializableDictionary& <
<< =
string= C
,C D
stringE K
>K L
{M N
}N O
[		 
Serializable		 
]		 
public

 
class

 !
ObjectColorDictionary

 "
:

# $"
SerializableDictionary

% ;
<

; <
UnityEngine

< G
.

G H
Object

H N
,

N O
Color

P U
>

U V
{

W X
}

X Y
[ 
Serializable 
] 
public 
class 
ColorArrayStorage 
:  "
SerializableDictionary! 7
.7 8
Storage8 ?
<? @
Color@ E
[E F
]F G
>G H
{I J
}J K
[ 
Serializable 
] 
public 
class &
StringColorArrayDictionary '
:( )"
SerializableDictionary* @
<@ A
stringA G
,G H
ColorI N
[N O
]O P
,P Q
ColorArrayStorageR c
>c d
{e f
}f g
[ 
Serializable 
] 
public 
class 
IntDoubleDictionary  
:! ""
SerializableDictionary# 9
<9 :
int: =
,= >
double? E
>E F
{G H
}H I
[ 
Serializable 
] 
public 
class "
IntIntDoubleDictionary #
:$ %"
SerializableDictionary& <
<< =
int= @
,@ A
IntDoubleDictionaryB U
>U V
{W X
}X Yú+
`C:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Core\Piece.cs
public 
abstract 
class 
Piece 
{ 
public 

const 
int 
NONE 
= 
$num 
; 
public 

const 
int 
PAWN 
= 
$num 
; 
public 

const 
int 
KNIGHT 
= 
$num 
;  
public 

const 
int 
BISHOP 
= 
$num 
;  
public		 

const		 
int		 
ROOK		 
=		 
$num		 
;		 
public

 

const

 
int

 
KING

 
=

 
$num

 
;

 
public 

const 
int 
QUEEN 
= 
$num 
; 
public 

const 
int 
KNOOK 
= 
$num 
; 
public 

const 
int 
WHITE 
= 
$num 
;  
public 

const 
int 
BLACK 
= 
$num 
;  
public 

static 
bool 
IsColor 
(  
int  #
piece$ )
,) *
int+ .
colour/ 5
)5 6
{7 8
return 
( 
piece 
& 
colour 
) 
!=  "
$num# $
;$ %
} 
public 

static 
int 
	PieceType 
(  !
int! $
piece% *
)* +
{, -
return 
piece 
> 
$num 
? 
piece !
-" #
$num$ &
:' (
piece) .
-/ 0
$num1 3
;3 4
} 
public 

static 
bool 
PieceChecker #
(# $
int$ '
pieceToCheck( 4
,4 5
int6 9
referencePiece: H
)H I
{I J
return 
	PieceType 
( 
pieceToCheck %
)% &
==' )
referencePiece* 8
;8 9
} 
public 

static 
bool 
PieceChecker #
(# $
int$ '
pieceToCheck( 4
,4 5
int6 9
referencePiece: H
,H I
intJ M
colorN S
)S T
{T U
return 
	PieceType 
( 
pieceToCheck %
)% &
==' )
referencePiece* 8
&&9 ;
IsColor< C
(C D
pieceToCheckD P
,P Q
colorR W
)W X
;X Y
} 
public!! 

static!! 
string!! 
	PieceName!! "
(!!" #
int!!# &
piece!!' ,
)!!, -
{!!. /
if"" 

("" 
piece"" 
>"" 
$num"" 
)"" 
piece"" 
-=""  
$num""! #
;""# $
else## 
piece## 
-=## 
$num## 
;## 
return%% 
piece%% 
switch%% 
{%% 
$num&& 
=>&& 
$str&& 
,&& 
$num'' 
=>'' 
$str'' 
,'' 
$num(( 
=>(( 
$str(( 
,(( 
$num)) 
=>)) 
$str)) 
,)) 
$num** 
=>** 
$str** 
,** 
$num++ 
=>++ 
$str++ 
,++ 
$num,, 
=>,, 
$str,, 
,,, 
_-- 
=>-- 
$str-- 
}.. 	
;..	 

}// 
public11 

static11 
string11 
PosFromIndex11 %
(11& '
int11' *
index11+ 0
)110 1
{111 2
char22 
file22 
=22 
(22 
char22 
)22 
(22 
$char22 
+22  !
index22" '
%22( )
$num22* +
)22+ ,
;22, -
char33 
rank33 
=33 
(33 
char33 
)33 
(33 
$char33 
+33  !
index33" '
/33( )
$num33* +
)33+ ,
;33, -
return44 
(44 
file44 
+44 
rank44 
)44 
.44 
ToString44 %
(44% &
)44& '
;44' (
}55 
public88 

static88 
int88 
	RankIndex88 
(88  
int88  #
squareIndex88$ /
)88/ 0
{881 2
return99 
squareIndex99 
>>99 
$num99 
;99  
}:: 
public== 

static== 
int== 
	FileIndex== 
(==  
int==  #
squareIndex==$ /
)==/ 0
{==1 2
return>> 
squareIndex>> 
&>> 
$num>> %
;>>% &
}?? 
}@@ Ç
kC:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\Chess\Renderers\RenderBoard.cs
[ 
ExecuteInEditMode 
] 
public 
class 
RenderBoard 
: 
MonoBehaviour (
{) *
[		 
Header		 
(		 
$str		 
)		 
]		 
[

 
SerializeField

 
]

 
private

 
Shader

 #
boardShader

$ /
;

/ 0
[ 
Header 
( 
$str 
) 
] 
[ 
SerializeField 
] 
private 
Color "

lightColor# -
;- .
[ 
SerializeField 
] 
private 
Color "
	darkColor# ,
;, -
[ 
Header 
( 
$str 
) 
] 
[ 
SerializeField 
] 
private 
Image "

background# -
;- .
private 
Material 
boardMaterial "
;" #
private 
static 
readonly 
int 
	DarkColor  )
=* +
Shader, 2
.2 3
PropertyToID3 ?
(? @
$str@ L
)L M
;M N
private 
static 
readonly 
int 

LightColor  *
=+ ,
Shader- 3
.3 4
PropertyToID4 @
(@ A
$strA N
)N O
;O P
private 
void 
Awake 
( 
) 
{ 
boardMaterial 
= 
new 
Material $
($ %
boardShader% 0
)0 1
;1 2

background 
. 
material 
= 
boardMaterial +
;+ ,
} 
private 
void 
Update 
( 
) 
{ 
boardMaterial 
. 
SetColor 
( 
	DarkColor (
,( )
	darkColor* 3
)3 4
;4 5
boardMaterial 
. 
SetColor 
( 

LightColor )
,) *

lightColor+ 5
)5 6
;6 7

background!! 
.!! 
rectTransform!!  
.!!  !
	sizeDelta!!! *
=!!+ ,
new!!- 0
Vector2!!1 8
(!!8 9
Screen!!9 ?
.!!? @
width!!@ E
,!!E F
Screen!!G M
.!!M N
height!!N T
)!!T U
;!!U V
}"" 
}## åQ
}C:\Users\kdeen\OneDrive\Documents\Coding Projects\Computer-IA\Assets\Scripts\SerializableDictionary\SerializableDictionary.cs
public 
abstract 
class &
SerializableDictionaryBase 0
<0 1
TKey1 5
,5 6
TValue7 =
,= >
TValueStorage? L
>L M
:N O

DictionaryP Z
<Z [
TKey[ _
,_ `
TValuea g
>g h
,h i+
ISerializationCallbackReceiver	j 
{ 
[		 
SerializeField		 
]		 
TKey

 
[

 
]

 
m_keys

 
;

 
[ 
SerializeField 
] 
TValueStorage 
[ 
] 
m_values 
; 
public &
SerializableDictionaryBase "
(" #
)# $
{ 
} 
public &
SerializableDictionaryBase "
(" #
IDictionary# .
<. /
TKey/ 3
,3 4
TValue5 ;
>; <
dict= A
)A B
:C D
baseE I
(I J
dictJ N
.N O
CountO T
)T U
{ 
foreach 	
(
 
var 
kvp 
in 
dict 
) 
{ 
this 
[ 
kvp 
. 
Key 
] 
= 
kvp 
. 
Value 
; 
} 
} 
	protected 
&
SerializableDictionaryBase %
(% &
SerializationInfo& 7
info8 <
,< =
StreamingContext> N
contextO V
)V W
:X Y
baseZ ^
(^ _
info_ c
,c d
contextd k
)k l
{l m
}m n
	protected 

abstract 
void 
SetValue !
(! "
TValueStorage" /
[/ 0
]0 1
storage2 9
,9 :
int; >
i? @
,@ A
TValueB H
valueI N
)N O
;O P
	protected 

abstract 
TValue 
GetValue #
(# $
TValueStorage$ 1
[1 2
]2 3
storage4 ;
,; <
int= @
iA B
)B C
;C D
public 
void 
CopyFrom 
( 
IDictionary !
<! "
TKey" &
,& '
TValue( .
>. /
dict0 4
)4 5
{   
this!! 
.!! 
Clear!! 
(!! 
)!! 
;!! 
foreach"" 	
(""
 
var"" 
kvp"" 
in"" 
dict"" 
)"" 
{## 
this$$ 
[$$ 
kvp$$ 
.$$ 
Key$$ 
]$$ 
=$$ 
kvp$$ 
.$$ 
Value$$ 
;$$ 
}%% 
}&& 
public(( 
void(( 
OnAfterDeserialize(( 
(((  
)((  !
{)) 
if** 
(** 
m_keys** 
!=** 
null** 
&&** 
m_values** 
!=**  "
null**# '
&&**( *
m_keys**+ 1
.**1 2
Length**2 8
==**9 ;
m_values**< D
.**D E
Length**E K
)**K L
{++ 
this,, 
.,, 
Clear,, 
(,, 
),, 
;,, 
int-- 
n-- 
=--	 

m_keys-- 
.-- 
Length-- 
;-- 
for.. 
(.. 
int.. 

i.. 
=.. 
$num.. 
;.. 
i.. 
<.. 
n.. 
;.. 
++.. 
i.. 
).. 
{// 
this00 
[00 	
m_keys00	 
[00 
i00 
]00 
]00 
=00 
GetValue00 
(00 
m_values00 '
,00' (
i00) *
)00* +
;00+ ,
}11 
m_keys33 	
=33
 
null33 
;33 
m_values44 
=44 
null44 
;44 
}55 
}77 
public99 
void99 
OnBeforeSerialize99 
(99 
)99  
{:: 
int;; 
n;; 
=;; 	
this;;
 
.;; 
Count;; 
;;; 
m_keys<< 
=<<	 

new<< 
TKey<< 
[<< 
n<< 
]<< 
;<< 
m_values== 

=== 
new== 
TValueStorage== 
[== 
n==  
]==  !
;==! "
int?? 
i?? 
=?? 	
$num??
 
;?? 
foreach@@ 	
(@@	 

var@@
 
kvp@@ 
in@@ 
this@@ 
)@@ 
{AA 
m_keysBB 	
[BB	 

iBB
 
]BB 
=BB 
kvpBB 
.BB 
KeyBB 
;BB 
SetValueCC 
(CC 
m_valuesCC 
,CC 
iCC 
,CC 
kvpCC 
.CC 
ValueCC "
)CC" #
;CC# $
++DD 
iDD 
;DD 
}EE 
}FF 
}GG 
publicII 
classII "
SerializableDictionaryII #
<II# $
TKeyII$ (
,II( )
TValueII* 0
>II0 1
:II2 3&
SerializableDictionaryBaseII4 N
<IIN O
TKeyIIO S
,IIS T
TValueIIU [
,II[ \
TValueII] c
>IIc d
{JJ 
publicKK "
SerializableDictionaryKK 
(KK 
)KK  
{LL 
}MM 
publicOO "
SerializableDictionaryOO 
(OO 
IDictionaryOO *
<OO* +
TKeyOO+ /
,OO/ 0
TValueOO1 7
>OO7 8
dictOO9 =
)OO= >
:OO? @
baseOOA E
(OOE F
dictOOF J
)OOJ K
{PP 
}QQ 
	protectedSS 
"
SerializableDictionarySS !
(SS! "
SerializationInfoSS" 3
infoSS4 8
,SS8 9
StreamingContextSS: J
contextSSK R
)SSR S
:SST U
baseSSV Z
(SSZ [
infoSS[ _
,SS_ `
contextSS` g
)SSg h
{SSh i
}SSi j
	protectedUU 

overrideUU 
TValueUU 
GetValueUU #
(UU# $
TValueUU$ *
[UU* +
]UU+ ,
storageUU- 4
,UU4 5
intUU6 9
iUU: ;
)UU; <
{VV 
returnWW 
storageWW	 
[WW 
iWW 
]WW 
;WW 
}XX 
	protectedZZ 

overrideZZ 
voidZZ 
SetValueZZ !
(ZZ! "
TValueZZ" (
[ZZ( )
]ZZ) *
storageZZ+ 2
,ZZ2 3
intZZ4 7
iZZ8 9
,ZZ9 :
TValueZZ; A
valueZZB G
)ZZG H
{[[ 
storage\\ 	
[\\	 

i\\
 
]\\ 
=\\ 
value\\ 
;\\ 
}]] 
}^^ 
public`` 
static`` 
class`` "
SerializableDictionary`` *
{aa 
publicbb 
classbb 
Storagebb 
<bb 
Tbb 
>bb 
{cc 
publicdd 
Tdd	 

datadd 
;dd 
}ee 
}ff 
publichh 
classhh "
SerializableDictionaryhh #
<hh# $
TKeyhh$ (
,hh( )
TValuehh* 0
,hh0 1
TValueStoragehh2 ?
>hh? @
:hhA B&
SerializableDictionaryBasehhC ]
<hh] ^
TKeyhh^ b
,hhb c
TValuehhd j
,hhj k
TValueStoragehhl y
>hhy z
where	hh{ 
TValueStorage
hh 
:
hh $
SerializableDictionary
hh §
.
hh§ ¨
Storage
hh¨ ¯
<
hh¯ °
TValue
hh° ¶
>
hh¶ ·
,
hh· ¸
new
hh¹ ¼
(
hh¼ ½
)
hh½ ¾
{ii 
publicjj "
SerializableDictionaryjj 
(jj 
)jj  
{kk 
}ll 
publicnn "
SerializableDictionarynn 
(nn 
IDictionarynn *
<nn* +
TKeynn+ /
,nn/ 0
TValuenn1 7
>nn7 8
dictnn9 =
)nn= >
:nn? @
basennA E
(nnE F
dictnnF J
)nnJ K
{oo 
}pp 
	protectedrr 
"
SerializableDictionaryrr !
(rr! "
SerializationInforr" 3
inforr4 8
,rr8 9
StreamingContextrr: J
contextrrK R
)rrR S
:rrT U
baserrV Z
(rrZ [
inforr[ _
,rr_ `
contextrr` g
)rrg h
{rrh i
}rri j
	protectedtt 

overridett 
TValuett 
GetValuett #
(tt# $
TValueStoragett$ 1
[tt1 2
]tt2 3
storagett4 ;
,tt; <
inttt= @
ittA B
)ttB C
{uu 
returnvv 
storagevv	 
[vv 
ivv 
]vv 
.vv 
datavv 
;vv 
}ww 
	protectedyy 

overrideyy 
voidyy 
SetValueyy !
(yy! "
TValueStorageyy" /
[yy/ 0
]yy0 1
storageyy2 9
,yy9 :
intyy; >
iyy? @
,yy@ A
TValueyyB H
valueyyI N
)yyN O
{zz 
storage{{ 	
[{{	 

i{{
 
]{{ 
={{ 
new{{ 
TValueStorage{{  
({{  !
){{! "
;{{" #
storage|| 	
[||	 

i||
 
]|| 
.|| 
data|| 
=|| 
value|| 
;|| 
}}} 
}~~ 